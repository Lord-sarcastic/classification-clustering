#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Aug 31 21:16:18 2019

@author: lord-sarcastic
"""

import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
from sklearn.cluster import KMeans
from scipy.spatial.distance import cdist

train = 'striped_data.csv'
data = pd.read_csv(train)
shape = (data.shape)
print(f"Number of items: {shape[0]}\nShape: {shape[1]}")
f1 = data['TotalScore'].values
f2 = data['Dept'].values
X = np.array(list(zip(f1, f2)))
k = 6
C_x = np.random.randint(0, np.max(X)-20, size=k)
C_y = np.random.randint(0, np.max(X)-20, size=k)
C = np.array(list(zip(C_x, C_y)), dtype=np.float32)
plt.scatter(f1, f2, c='#050505', s=20)
plt.scatter(C_x, C_y, marker='*', s=200, c='g')
plt.xlabel("Total Score feature")
plt.ylabel("Dept feature")
plt.title("Output data")
kmeans = KMeans(n_clusters=k)
kmeans = kmeans.fit(X)
labels = kmeans.predict(X)
centroids = kmeans.cluster_centers_
colors = ['r', 'g', 'b', 'y', 'c', 'm', 'o', 'w']
fig2 = plt.figure()
kx = fig2.add_subplot(111)

for i in range(k):
    points = np.array([X[j] for j in range(len(X)) if labels[j] == i])
    kx.scatter(points[:, 0], points[:, 1], s=20, cmap='rainbow')
kx.scatter(centroids[:, 0], centroids[:, 1], marker='*', s=200, c='#050505')
print("Final centroids")
print(centroids)
plt.xlabel("Total score feature")
plt.ylabel("Dept feature")
plt.title('Number of clusters={}'.format(k))
K_range = range(1, 10)
distortions = []

#*****************************
#from sklearn.tree import export_graphviz
#from six import StringIO  
#from IPython.display import Image  
#import pydotplus
#
#dot_data = StringIO()
#export_graphviz(clf, out_file=dot_data,  
#                filled=True, rounded=True,
#                special_characters=True,feature_names = feature_cols,class_names=['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27', '28'])
#graph = pydotplus.graph_from_dot_data(dot_data.getvalue())  
#graph.write_png('done4.png')
#Image(graph.create_png())
#*****************************
for i in K_range:
    kmeanModel = KMeans(n_clusters=i)
    kmeanModel.fit(X)
    distortions.append(sum(np.min(cdist(X, kmeanModel.cluster_centers_, 'euclidean'), axis=1)) / X.shape[0])

fig1 = plt.figure()
ex = fig1.add_subplot(111)
ex.plot(K_range, distortions, 'b*-')

plt.grid(True)
plt.ylim([0, 45])
plt.xlabel("Number of clusters")
plt.ylabel("Average distortion")
plt.title("Selecting K with the Elbow Method")